// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AMContext))]
    partial class AMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Domain.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CinemaId");

                    b.ToTable("Cinema");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmId"));

                    b.Property<DateTime>("DateRealisation")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duree")
                        .HasColumnType("float");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeFilm")
                        .HasColumnType("int");

                    b.HasKey("FilmId");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Projection", b =>
                {
                    b.Property<int>("FilmFk")
                        .HasColumnType("int");

                    b.Property<int>("SalleFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProjection")
                        .HasColumnType("datetime2");

                    b.Property<int>("MyFilmFilmId")
                        .HasColumnType("int");

                    b.Property<int>("MySalleIdSalle")
                        .HasColumnType("int");

                    b.Property<string>("TypeProjection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilmFk", "SalleFk", "DateProjection");

                    b.HasIndex("MyFilmFilmId");

                    b.HasIndex("MySalleIdSalle");

                    b.ToTable("Projection");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Salle", b =>
                {
                    b.Property<int>("IdSalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSalle"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("NbPlaces")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("IdSalle");

                    b.HasIndex("CinemaId");

                    b.ToTable("Salle");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Projection", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Film", "MyFilm")
                        .WithMany("Projections")
                        .HasForeignKey("MyFilmFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Salle", "MySalle")
                        .WithMany("Projections")
                        .HasForeignKey("MySalleIdSalle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyFilm");

                    b.Navigation("MySalle");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Salle", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Cinema", "Cinema")
                        .WithMany("Salles")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Cinema", b =>
                {
                    b.Navigation("Salles");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Film", b =>
                {
                    b.Navigation("Projections");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Salle", b =>
                {
                    b.Navigation("Projections");
                });
#pragma warning restore 612, 618
        }
    }
}
